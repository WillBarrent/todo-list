(()=>{"use strict";var t={208:(t,n,e)=>{e.d(n,{A:()=>d});var o=e(354),r=e.n(o),a=e(314),i=e.n(a)()(r());i.push([t.id,':root {\n  --sidebar-color: #ffce66;\n  --logo-color: #ff552b;\n  --header-color: #f8efed;\n}\n\n*,\n*::after,\n*::before {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n/* width */\n::-webkit-scrollbar {\n  width: 5px;\n}\n\n/* Track */\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px rgba(255 255 255 / .5);\n  border-radius: 10px;\n}\n\n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: rgba(255 255 255 / .3);\n  border-radius: 10px;\n}\n\nbody {\n  padding: 0px 0px;\n\n  box-sizing: border-box;\n\n  font-family: "Montserrat", sans-serif;\n\n  max-width: 1920px;\n  margin: 0 auto;\n\n  background-color: #ffff9b;\n}\n\nsvg {\n  width: 30px;\n}\n\n/* LAYOUT */\n\n.app {\n  height: 100vh;\n\n  display: grid;\n  grid-template-rows: 100px 1fr;\n  grid-template-columns: 300px 1fr;\n\n  border: 1px solid rgb(0 0 0 / 0.1);\n}\n\n.header {\n  background-color: var(--header-color);\n\n  display: flex;\n  align-items: center;\n  padding-left: 40px;\n  font-size: 30px;\n  font-weight: 500;\n}\n\n.sidebar {\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n\n  background-color: var(--sidebar-color);\n  padding: 20px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.logo {\n  grid-row: 1 / 2;\n  grid-column: 1 / 2;\n\n  background-color: var(--logo-color);\n}\n\n.content {\n  background-color: white;\n\n  position: relative;\n}\n\n/* DESIGN */\n\n.logo {\n  color: #fff;\n\n  font-size: 40px;\n\n  font-weight: 600;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.sidebar-img svg {\n  width: 50px;\n}\n\n.sidebar-img svg path {\n  fill: #fff;\n}\n\n.sidebar-item {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n.sidebar-text {\n  color: #fff;\n  font-weight: 600;\n  font-size: 20px;\n}\n\n.sidebar-text:hover {\n  color: rgb(255 255 255 / 0.7);\n  cursor: pointer;\n}\n\n.projects {\n  max-height: 200px;\n\n  display: flex;\n  flex-direction: column;\n\n  overflow: auto;\n}\n\n.projects-title {\n  margin-top: 30px;\n\n  display: flex;\n  align-items: center;\n  gap: 15px;\n\n  color: white;\n  font-weight: 600;\n  font-size: 20px;\n\n  cursor: pointer;\n}\n\n.projects-title:hover {\n  color: rgb(255 255 255 / 0.8);\n}\n\n.projects-see-all svg {\n  width: 50px;\n  fill: #fff;\n}\n\n.project-img svg {\n  width: 30px;\n  fill: #fff;\n}\n\n.project {\n  padding: 10px;\n\n  display: flex;\n  align-items: center;\n  gap: 10px;\n\n  font-size: 15px;\n\n  color: white;\n}\n\n.project-name {\n  font-weight: 500;\n}\n\n.project-name:hover {\n  cursor: pointer;\n\n  color: rgb(255 255 255 / 0.7);\n}\n\n.content {\n  padding: 30px 40px;\n\n  overflow: auto;\n}\n\n.todo__form {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  font-size: 25px;\n}\n\n.todo__items-list {\n  display: flex;\n  flex-direction: column;\n\n  padding: 10px;\n\n  max-height: 400px;\n  overflow: auto;\n}\n\n.todo__items-list::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px rgba(255 255 255 / .5);\n  border-radius: 10px;\n}\n\n/* Handle */\n.todo__items-list::-webkit-scrollbar-thumb {\n  background: rgba(0 0 0 / .3);\n  border-radius: 10px;\n}\n\n.todo__item {\n  padding-bottom: 15px;\n  padding-top: 15px;\n  border-bottom: 1px solid rgb(0 0 0 / .1);\n}\n\n.todo__item:last-child {\n  border: none;\n}\n\n.todo__checkbox {\n  display: none;\n}\n\n.todo__title {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n\n  flex-wrap: wrap;\n}\n\n.todo__title--circle {\n  content: "";\n  display: block;\n\n  width: 25px;\n  height: 25px;\n\n  border: 2px solid rgb(0 0 0 / .5);\n\n  border-radius: 50%;\n\n  background-color: rgb(0 0 0 / .3);\n\n  cursor: pointer;\n}\n\n.todo__title--circle:hover {\n  background-color: rgb(0 0 0 / .4);\n}\n\n.todo__project-name {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n\n.todo__project-img svg {\n  width: 20px;\n  fill: rgb(0 0 0 / .5);\n}\n\n.todo__duedate {\n  margin-left: 35px;\n  color: #08b39c;\n}\n\n.todo__project-name {\n  color: rgb(0 0 0 / .5);\n}\n\n.todo__duedate, .todo__project-name {\n  font-size: 15px;\n}\n\n.todo__text {\n  flex: 1 0 80%;\n}\n\n.todo__settings {\n  flex: 1 0 15%;\n  cursor: pointer;\n\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.todo__settings:hover svg {\n  fill: rgb(0 0 0 / .5);\n}\n\n.todo__add-task--btn, .todo__add-project--btn {\n  margin-top: 30px;\n\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n\n  gap: 10px;\n}\n\n.todo__add-task--btn:hover, .todo__add-project--btn:hover {\n  color: rgb(0 0 0 / .5);\n  cursor: pointer;\n}\n\n.todo__add-task--icon, .todo__add-project--icon {\n  width: 25px;\n  height: 25px;\n\n  color: var(--header-color);\n\n  border-radius: 50%;\n  background-color: var(--logo-color);\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.todo__add-task--btn:hover .todo__add-task--icon,\n.todo__add-project--btn:hover .todo__add-project--icon {\n  color: var(--sidebar-color);\n}\n\n.todo__add-task {\n  margin-top: 30px;\n\n  font-weight: 300;\n\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 10px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.todo__add-task input {\n  border: none;\n  outline: none;\n\n  font-family: inherit;\n  font-size: 18px;\n  font-weight: inherit;\n}\n\ninput.todo__add-task--name {\n  font-weight: 500;\n}\n\ninput.todo__add-task--description {\n  font-size: 15px;\n}\n\n.todo__add-task--settings {\n  margin-top: 5px;\n\n  display: flex;\n  align-items: center;\n  gap: 20px;\n}\n\n.duedate, .priority {\n  margin-top: 5px;\n}\n\n.duedate-title, .priority-title { \n  font-size: 15px;\n\n  display: flex;\n  align-items: center;\n  gap: 5px;\n\n  border: 1px solid rgb(0 0 0 / .5);\n  border-radius: 5px;\n  padding: 3px 5px;\n}\n\n.duedate-title:hover, .priority-title:hover {\n  background-color: rgb(229 229 229 / .7);\n\n  cursor: pointer;\n}\n\n.todo__add-task--add {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.todo__add-task--project-title {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n\n.todo__add-task--project-img svg {\n  width: 10px;\n}\n\n.todo__add-task--cancel-text {\n  margin-left: auto;\n}\n\n.todo__add-task--add {\n  margin-top: 20px;\n}\n\n.todo__add-task--add-text, .add-project__add {\n  background-color: var(--logo-color);\n  color: var(--header-color);\n  padding: 5px 15px;\n\n  cursor: pointer;\n}\n\n.todo__add-task--add-text:hover, .add-project__add:hover {\n  background-color: rgb(255 85 43 / .8);\n}\n\n.todo__add-task--cancel-text, .todo__add-task--project-title, .add-project__cancel  {\n  background-color: rgb(229, 229, 229);\n  padding: 5px 15px;\n\n  cursor: pointer;\n}\n\n.todo__add-task--cancel-text:hover, .todo__add-task--project-title:hover, .add-project__cancel:hover {\n  background-color: rgb(229, 229, 229, .8);\n}\n\n.add-project {\n  margin-top: 30px;\n}\n\n.add-project__title {\n  font-family: inherit;\n  font-size: inherit;\n\n  border: none;\n  outline: none;\n\n  padding: 5px;\n\n  width: 100%;\n}\n\n.add-project__buttons {\n  padding: 10px 0;\n\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n}\n\n.priority, .duedate {\n  position: relative;\n}\n\n.priority__settings, .duedate__settings {\n  position: absolute;\n\n  left: 50%;\n\n  transform: translateX(-50%);\n\n  border: 1px solid rgb(0 0 0 / .5);\n  border-radius: 5px;\n}\n\n.priority__item, .duedate__item {\n  font-size: 13px;\n\n  padding: 5px 20px;\n\n  background-color: white;\n\n  width: 100%;\n\n  cursor: pointer;\n\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.priority__item:hover, .duedate__item:hover {\n  background-color: rgb(229 229 229);\n}\n\n.low, .medium, .high, .none {\n  display: block;\n\n  width: 20px;\n  height: 20px;\n  \n  background-color: #08b39c;\n\n  border-radius: 50%;\n}\n\n.medium {\n  background-color: #ffce66;\n}\n\n.high {\n  background-color: #ff552b;\n}\n\n.none {\n  background-color: rgb(229 229 229);\n}\n\ninput[type=date] {\n  padding: 5px 20px;\n\n  width: 100%;\n\n  font-size: inherit;\n}\n\n.todo__add-task--project {\n  position: relative;\n}\n\n.todo__add-task--project-projects {\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%);\n\n  background-color: white;\n\n\n  border: 1px solid rgb(0 0 0 / .5);\n  border-radius: 5px;\n}\n\n.todo__add-task--item {\n  padding: 5px 20px;\n\n  cursor: pointer;\n}\n\n.todo__add-task--item:hover {\n  background-color: rgb(229 229 229);\n}\n\n.todo__settings {\n  position: relative;\n}\n\n.todo__settings-all {\n  background-color: white;\n\n  box-shadow: 1px 1px 5px rgb(0 0 0 / .4);\n\n  font-size: 16px;\n\n  position: absolute;\n  top: 50%;\n  left: 0px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n\n  z-index: 200000;\n}\n\n.todo__settings-item {\n  padding: 10px 20px;\n}\n\n.todo__settings-item:hover {\n  background-color: rgb(229 229 229);\n}\n\n.duedate__settings {\n  z-index: 1000;\n}\n\n.priority__settings {\n  z-index: 1000;\n}\n\n.project-settings {\n  display: flex;\n  gap: 5px;\n  margin-left: auto;\n}\n\n.project-settings svg {\n  width: 25px;\n}\n\n.project-settings-rename {\n  fill: #0cce00;\n  cursor: pointer;\n}\n\n.project-settings-rename:hover {\n  fill: #22f117;\n}\n\n.project-settings-delete {\n  fill: #cd004d;\n  cursor: pointer;\n}\n\n.project-settings-delete:hover {\n  fill: #ff0f6b;\n}\n\n.hidden {\n  display: none;\n}\n\n.content__info {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  box-shadow: -6px -3px 20px 2000px rgb(0 0 0 / .3);\n  padding: 20px 40px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  width: 500px;\n\n  z-index: 5000000000;\n\n  background-color: #fff;\n}\n\n.content__close--btn {\n  background-color: rgb(229, 229, 229);\n  padding: 5px 15px;\n\n  cursor: pointer;\n}\n\n.content__close--btn:hover {\n  background-color: rgba(229, 229, 229, .8);\n}\n\n.content__name, .content__description, .content__duedate, .content__priority, .content__project {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  text-align: justify;\n}\n\n.content__description {\n  margin: 10px 0;\n}\n\n.content__label-name {\n  font-weight: bold;\n}\n\n.content__close {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 40px;\n}\n\n.content__close--btn {\n  width: 50%;\n  \n  text-align: center;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\n  --sidebar-color: #ffce66;\n  --logo-color: #ff552b;\n  --header-color: #f8efed;\n}\n\n*,\n*::after,\n*::before {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\n/* width */\n::-webkit-scrollbar {\n  width: 5px;\n}\n\n/* Track */\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px rgba(255 255 255 / .5);\n  border-radius: 10px;\n}\n\n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: rgba(255 255 255 / .3);\n  border-radius: 10px;\n}\n\nbody {\n  padding: 0px 0px;\n\n  box-sizing: border-box;\n\n  font-family: "Montserrat", sans-serif;\n\n  max-width: 1920px;\n  margin: 0 auto;\n\n  background-color: #ffff9b;\n}\n\nsvg {\n  width: 30px;\n}\n\n/* LAYOUT */\n\n.app {\n  height: 100vh;\n\n  display: grid;\n  grid-template-rows: 100px 1fr;\n  grid-template-columns: 300px 1fr;\n\n  border: 1px solid rgb(0 0 0 / 0.1);\n}\n\n.header {\n  background-color: var(--header-color);\n\n  display: flex;\n  align-items: center;\n  padding-left: 40px;\n  font-size: 30px;\n  font-weight: 500;\n}\n\n.sidebar {\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n\n  background-color: var(--sidebar-color);\n  padding: 20px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.logo {\n  grid-row: 1 / 2;\n  grid-column: 1 / 2;\n\n  background-color: var(--logo-color);\n}\n\n.content {\n  background-color: white;\n\n  position: relative;\n}\n\n/* DESIGN */\n\n.logo {\n  color: #fff;\n\n  font-size: 40px;\n\n  font-weight: 600;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.sidebar-img svg {\n  width: 50px;\n}\n\n.sidebar-img svg path {\n  fill: #fff;\n}\n\n.sidebar-item {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n.sidebar-text {\n  color: #fff;\n  font-weight: 600;\n  font-size: 20px;\n}\n\n.sidebar-text:hover {\n  color: rgb(255 255 255 / 0.7);\n  cursor: pointer;\n}\n\n.projects {\n  max-height: 200px;\n\n  display: flex;\n  flex-direction: column;\n\n  overflow: auto;\n}\n\n.projects-title {\n  margin-top: 30px;\n\n  display: flex;\n  align-items: center;\n  gap: 15px;\n\n  color: white;\n  font-weight: 600;\n  font-size: 20px;\n\n  cursor: pointer;\n}\n\n.projects-title:hover {\n  color: rgb(255 255 255 / 0.8);\n}\n\n.projects-see-all svg {\n  width: 50px;\n  fill: #fff;\n}\n\n.project-img svg {\n  width: 30px;\n  fill: #fff;\n}\n\n.project {\n  padding: 10px;\n\n  display: flex;\n  align-items: center;\n  gap: 10px;\n\n  font-size: 15px;\n\n  color: white;\n}\n\n.project-name {\n  font-weight: 500;\n}\n\n.project-name:hover {\n  cursor: pointer;\n\n  color: rgb(255 255 255 / 0.7);\n}\n\n.content {\n  padding: 30px 40px;\n\n  overflow: auto;\n}\n\n.todo__form {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  font-size: 25px;\n}\n\n.todo__items-list {\n  display: flex;\n  flex-direction: column;\n\n  padding: 10px;\n\n  max-height: 400px;\n  overflow: auto;\n}\n\n.todo__items-list::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px rgba(255 255 255 / .5);\n  border-radius: 10px;\n}\n\n/* Handle */\n.todo__items-list::-webkit-scrollbar-thumb {\n  background: rgba(0 0 0 / .3);\n  border-radius: 10px;\n}\n\n.todo__item {\n  padding-bottom: 15px;\n  padding-top: 15px;\n  border-bottom: 1px solid rgb(0 0 0 / .1);\n}\n\n.todo__item:last-child {\n  border: none;\n}\n\n.todo__checkbox {\n  display: none;\n}\n\n.todo__title {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n\n  flex-wrap: wrap;\n}\n\n.todo__title--circle {\n  content: "";\n  display: block;\n\n  width: 25px;\n  height: 25px;\n\n  border: 2px solid rgb(0 0 0 / .5);\n\n  border-radius: 50%;\n\n  background-color: rgb(0 0 0 / .3);\n\n  cursor: pointer;\n}\n\n.todo__title--circle:hover {\n  background-color: rgb(0 0 0 / .4);\n}\n\n.todo__project-name {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n\n.todo__project-img svg {\n  width: 20px;\n  fill: rgb(0 0 0 / .5);\n}\n\n.todo__duedate {\n  margin-left: 35px;\n  color: #08b39c;\n}\n\n.todo__project-name {\n  color: rgb(0 0 0 / .5);\n}\n\n.todo__duedate, .todo__project-name {\n  font-size: 15px;\n}\n\n.todo__text {\n  flex: 1 0 80%;\n}\n\n.todo__settings {\n  flex: 1 0 15%;\n  cursor: pointer;\n\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.todo__settings:hover svg {\n  fill: rgb(0 0 0 / .5);\n}\n\n.todo__add-task--btn, .todo__add-project--btn {\n  margin-top: 30px;\n\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n\n  gap: 10px;\n}\n\n.todo__add-task--btn:hover, .todo__add-project--btn:hover {\n  color: rgb(0 0 0 / .5);\n  cursor: pointer;\n}\n\n.todo__add-task--icon, .todo__add-project--icon {\n  width: 25px;\n  height: 25px;\n\n  color: var(--header-color);\n\n  border-radius: 50%;\n  background-color: var(--logo-color);\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.todo__add-task--btn:hover .todo__add-task--icon,\n.todo__add-project--btn:hover .todo__add-project--icon {\n  color: var(--sidebar-color);\n}\n\n.todo__add-task {\n  margin-top: 30px;\n\n  font-weight: 300;\n\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 10px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.todo__add-task input {\n  border: none;\n  outline: none;\n\n  font-family: inherit;\n  font-size: 18px;\n  font-weight: inherit;\n}\n\ninput.todo__add-task--name {\n  font-weight: 500;\n}\n\ninput.todo__add-task--description {\n  font-size: 15px;\n}\n\n.todo__add-task--settings {\n  margin-top: 5px;\n\n  display: flex;\n  align-items: center;\n  gap: 20px;\n}\n\n.duedate, .priority {\n  margin-top: 5px;\n}\n\n.duedate-title, .priority-title { \n  font-size: 15px;\n\n  display: flex;\n  align-items: center;\n  gap: 5px;\n\n  border: 1px solid rgb(0 0 0 / .5);\n  border-radius: 5px;\n  padding: 3px 5px;\n}\n\n.duedate-title:hover, .priority-title:hover {\n  background-color: rgb(229 229 229 / .7);\n\n  cursor: pointer;\n}\n\n.todo__add-task--add {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.todo__add-task--project-title {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n\n.todo__add-task--project-img svg {\n  width: 10px;\n}\n\n.todo__add-task--cancel-text {\n  margin-left: auto;\n}\n\n.todo__add-task--add {\n  margin-top: 20px;\n}\n\n.todo__add-task--add-text, .add-project__add {\n  background-color: var(--logo-color);\n  color: var(--header-color);\n  padding: 5px 15px;\n\n  cursor: pointer;\n}\n\n.todo__add-task--add-text:hover, .add-project__add:hover {\n  background-color: rgb(255 85 43 / .8);\n}\n\n.todo__add-task--cancel-text, .todo__add-task--project-title, .add-project__cancel  {\n  background-color: rgb(229, 229, 229);\n  padding: 5px 15px;\n\n  cursor: pointer;\n}\n\n.todo__add-task--cancel-text:hover, .todo__add-task--project-title:hover, .add-project__cancel:hover {\n  background-color: rgb(229, 229, 229, .8);\n}\n\n.add-project {\n  margin-top: 30px;\n}\n\n.add-project__title {\n  font-family: inherit;\n  font-size: inherit;\n\n  border: none;\n  outline: none;\n\n  padding: 5px;\n\n  width: 100%;\n}\n\n.add-project__buttons {\n  padding: 10px 0;\n\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n}\n\n.priority, .duedate {\n  position: relative;\n}\n\n.priority__settings, .duedate__settings {\n  position: absolute;\n\n  left: 50%;\n\n  transform: translateX(-50%);\n\n  border: 1px solid rgb(0 0 0 / .5);\n  border-radius: 5px;\n}\n\n.priority__item, .duedate__item {\n  font-size: 13px;\n\n  padding: 5px 20px;\n\n  background-color: white;\n\n  width: 100%;\n\n  cursor: pointer;\n\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.priority__item:hover, .duedate__item:hover {\n  background-color: rgb(229 229 229);\n}\n\n.low, .medium, .high, .none {\n  display: block;\n\n  width: 20px;\n  height: 20px;\n  \n  background-color: #08b39c;\n\n  border-radius: 50%;\n}\n\n.medium {\n  background-color: #ffce66;\n}\n\n.high {\n  background-color: #ff552b;\n}\n\n.none {\n  background-color: rgb(229 229 229);\n}\n\ninput[type=date] {\n  padding: 5px 20px;\n\n  width: 100%;\n\n  font-size: inherit;\n}\n\n.todo__add-task--project {\n  position: relative;\n}\n\n.todo__add-task--project-projects {\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%);\n\n  background-color: white;\n\n\n  border: 1px solid rgb(0 0 0 / .5);\n  border-radius: 5px;\n}\n\n.todo__add-task--item {\n  padding: 5px 20px;\n\n  cursor: pointer;\n}\n\n.todo__add-task--item:hover {\n  background-color: rgb(229 229 229);\n}\n\n.todo__settings {\n  position: relative;\n}\n\n.todo__settings-all {\n  background-color: white;\n\n  box-shadow: 1px 1px 5px rgb(0 0 0 / .4);\n\n  font-size: 16px;\n\n  position: absolute;\n  top: 50%;\n  left: 0px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n\n  z-index: 200000;\n}\n\n.todo__settings-item {\n  padding: 10px 20px;\n}\n\n.todo__settings-item:hover {\n  background-color: rgb(229 229 229);\n}\n\n.duedate__settings {\n  z-index: 1000;\n}\n\n.priority__settings {\n  z-index: 1000;\n}\n\n.project-settings {\n  display: flex;\n  gap: 5px;\n  margin-left: auto;\n}\n\n.project-settings svg {\n  width: 25px;\n}\n\n.project-settings-rename {\n  fill: #0cce00;\n  cursor: pointer;\n}\n\n.project-settings-rename:hover {\n  fill: #22f117;\n}\n\n.project-settings-delete {\n  fill: #cd004d;\n  cursor: pointer;\n}\n\n.project-settings-delete:hover {\n  fill: #ff0f6b;\n}\n\n.hidden {\n  display: none;\n}\n\n.content__info {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  box-shadow: -6px -3px 20px 2000px rgb(0 0 0 / .3);\n  padding: 20px 40px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  width: 500px;\n\n  z-index: 5000000000;\n\n  background-color: #fff;\n}\n\n.content__close--btn {\n  background-color: rgb(229, 229, 229);\n  padding: 5px 15px;\n\n  cursor: pointer;\n}\n\n.content__close--btn:hover {\n  background-color: rgba(229, 229, 229, .8);\n}\n\n.content__name, .content__description, .content__duedate, .content__priority, .content__project {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  text-align: justify;\n}\n\n.content__description {\n  margin: 10px 0;\n}\n\n.content__label-name {\n  font-weight: bold;\n}\n\n.content__close {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 40px;\n}\n\n.content__close--btn {\n  width: 50%;\n  \n  text-align: center;\n}'],sourceRoot:""}]);const d=i},314:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",o=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),o&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),o&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,o,r,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var s=0;s<t.length;s++){var A=[].concat(t[s]);o&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),n.push(A))}},n}},354:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},72:t=>{var n=[];function e(t){for(var e=-1,o=0;o<n.length;o++)if(n[o].identifier===t){e=o;break}return e}function o(t,o){for(var a={},i=[],d=0;d<t.length;d++){var c=t[d],s=o.base?c[0]+o.base:c[0],A=a[s]||0,l="".concat(s," ").concat(A);a[s]=A+1;var u=e(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var g=r(p,o);o.byIndex=d,n.splice(d,0,{identifier:l,updater:g,references:1})}i.push(l)}return i}function r(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,r){var a=o(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var d=e(a[i]);n[d].references--}for(var c=o(t,r),s=0;s<a.length;s++){var A=e(a[s]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=c}}},659:t=>{var n={};t.exports=function(t,e){var o=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},540:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},56:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},113:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return t[o](a,a.exports,e),a.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(72),n=e.n(t),o=e(825),r=e.n(o),a=e(659),i=e.n(a),d=e(56),c=e.n(d),s=e(540),A=e.n(s),l=e(113),u=e.n(l),p=e(208),g={};function f(t){localStorage.removeItem(t)}function m(){const t=Object.entries(localStorage);return Array.from(t)}function h(t,n){try{t.appendChild(n)}catch(t){console.log(t),console.log("Maybe your input is wrong")}}function E(t,n){t.after(n)}function x(t,n){t.prepend(n)}function _(t,n){const e=document.createElement(t);return e.className=n,e}function C(t,n,e){const o=_(t,n);return o.textContent=e,o}function b(t="text",n,e,o="",r="",a=""){const i=_("input",n);return i.className=n,i.type=t,i.placeholder=e,i.id=o,i.value=r,i}function y(t="Add"){const n=document.querySelector(".sidebar"),e=_("form","add-project");"Add"===t?e.classList.add("hidden"):e.classList.add("project-edit-form");const o=b("text","add-project__title","Project Name"),r=_("div","add-project__buttons"),a=_("div","add-project__cancel"),i=_("div","add-project__add");return a.textContent="Cancel",i.textContent=t,h(n,e),h(e,o),h(e,o),h(e,r),h(r,a),h(r,i),e}g.styleTagTransform=u(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=A(),n()(p.A,g),p.A&&p.A.locals&&p.A.locals;const B=document.querySelector(".add-project__add"),w=document.querySelector(".add-project__title");function v(t="Default"){const n=_("div","project"),e=_("div","project-img");e.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.41,21L6.12,17H2.12L2.47,15H6.47L7.53,9H3.53L3.88,7H7.88L8.59,3H10.59L9.88,7H15.88L16.59,3H18.59L17.88,7H21.88L21.53,9H17.53L16.47,15H20.47L20.12,17H16.12L15.41,21H13.41L14.12,17H8.12L7.41,21H5.41M9.53,9L8.47,15H14.47L15.53,9H9.53Z" /></svg>';const o=_("div","project-name");o.textContent=t;const r=_("div","project-settings"),a=_("div","project-rename"),i=_("div","project-delete");return a.classList.add("project-settings-rename"),i.classList.add("project-settings-delete"),a.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15 16L11 20H21V16H15M12.06 7.19L3 16.25V20H6.75L15.81 10.94L12.06 7.19M18.71 8.04C19.1 7.65 19.1 7 18.71 6.63L16.37 4.29C16.17 4.09 15.92 4 15.66 4C15.41 4 15.15 4.1 14.96 4.29L13.13 6.12L16.88 9.87L18.71 8.04Z" /></svg>',i.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>',h(r,a),h(r,i),h(n,e),h(n,o),h(n,r),n}const k={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function j(t){return(n={})=>{const e=n.width?String(n.width):t.defaultWidth;return t.formats[e]||t.formats[t.defaultWidth]}}const S={date:j({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:j({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:j({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function M(t){return(n,e)=>{let o;if("formatting"===(e?.context?String(e.context):"standalone")&&t.formattingValues){const n=t.defaultFormattingWidth||t.defaultWidth,r=e?.width?String(e.width):n;o=t.formattingValues[r]||t.formattingValues[n]}else{const n=t.defaultWidth,r=e?.width?String(e.width):t.defaultWidth;o=t.values[r]||t.values[n]}return o[t.argumentCallback?t.argumentCallback(n):n]}}const H={ordinalNumber:(t,n)=>{const e=Number(t),o=e%100;if(o>20||o<10)switch(o%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:M({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:M({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:M({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:M({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:M({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function q(t){return(n,e={})=>{const o=e.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=n.match(r);if(!a)return null;const i=a[0],d=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(d)?function(t,n){for(let n=0;n<t.length;n++)if(t[n].test(i))return n}(d):function(t,n){for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&t[n].test(i))return n}(d);let s;return s=t.valueCallback?t.valueCallback(c):c,s=e.valueCallback?e.valueCallback(s):s,{value:s,rest:n.slice(i.length)}}}const D={ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,n={})=>{const e=t.match(T.matchPattern);if(!e)return null;const o=e[0],r=t.match(T.parsePattern);if(!r)return null;let a=T.valueCallback?T.valueCallback(r[0]):r[0];return a=n.valueCallback?n.valueCallback(a):a,{value:a,rest:t.slice(o.length)}}),era:q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var T;const W={code:"en-US",formatDistance:(t,n,e)=>{let o;const r=k[t];return o="string"==typeof r?r:1===n?r.one:r.other.replace("{{count}}",n.toString()),e?.addSuffix?e.comparison&&e.comparison>0?"in "+o:o+" ago":o},formatLong:S,formatRelative:(t,n,e,o)=>L[t],localize:H,match:D,options:{weekStartsOn:0,firstWeekContainsDate:1}};let I={};function P(){return I}Math.pow(10,8);const N=6048e5,z=864e5;function Y(t){const n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new t.constructor(+t):"number"==typeof t||"[object Number]"===n||"string"==typeof t||"[object String]"===n?new Date(t):new Date(NaN)}function O(t){const n=Y(t);return n.setHours(0,0,0,0),n}function V(t){const n=Y(t),e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),+t-+e}function U(t,n){return t instanceof Date?new t.constructor(n):new Date(n)}function X(t){const n=Y(t);return function(t,n){const e=O(t),o=O(n),r=+e-V(e),a=+o-V(o);return Math.round((r-a)/z)}(n,function(t){const n=Y(t),e=U(t,0);return e.setFullYear(n.getFullYear(),0,1),e.setHours(0,0,0,0),e}(n))+1}function Q(t,n){const e=P(),o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??e.weekStartsOn??e.locale?.options?.weekStartsOn??0,r=Y(t),a=r.getDay(),i=(a<o?7:0)+a-o;return r.setDate(r.getDate()-i),r.setHours(0,0,0,0),r}function F(t){return Q(t,{weekStartsOn:1})}function R(t){const n=Y(t),e=n.getFullYear(),o=U(t,0);o.setFullYear(e+1,0,4),o.setHours(0,0,0,0);const r=F(o),a=U(t,0);a.setFullYear(e,0,4),a.setHours(0,0,0,0);const i=F(a);return n.getTime()>=r.getTime()?e+1:n.getTime()>=i.getTime()?e:e-1}function J(t){const n=Y(t),e=+F(n)-+function(t){const n=R(t),e=U(t,0);return e.setFullYear(n,0,4),e.setHours(0,0,0,0),F(e)}(n);return Math.round(e/N)+1}function Z(t,n){const e=Y(t),o=e.getFullYear(),r=P(),a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=U(t,0);i.setFullYear(o+1,0,a),i.setHours(0,0,0,0);const d=Q(i,n),c=U(t,0);c.setFullYear(o,0,a),c.setHours(0,0,0,0);const s=Q(c,n);return e.getTime()>=d.getTime()?o+1:e.getTime()>=s.getTime()?o:o-1}function G(t,n){const e=Y(t),o=+Q(e,n)-+function(t,n){const e=P(),o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??e.firstWeekContainsDate??e.locale?.options?.firstWeekContainsDate??1,r=Z(t,n),a=U(t,0);return a.setFullYear(r,0,o),a.setHours(0,0,0,0),Q(a,n)}(e,n);return Math.round(o/N)+1}function $(t,n){return(t<0?"-":"")+Math.abs(t).toString().padStart(n,"0")}const K={y(t,n){const e=t.getFullYear(),o=e>0?e:1-e;return $("yy"===n?o%100:o,n.length)},M(t,n){const e=t.getMonth();return"M"===n?String(e+1):$(e+1,2)},d:(t,n)=>$(t.getDate(),n.length),a(t,n){const e=t.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.toUpperCase();case"aaa":return e;case"aaaaa":return e[0];default:return"am"===e?"a.m.":"p.m."}},h:(t,n)=>$(t.getHours()%12||12,n.length),H:(t,n)=>$(t.getHours(),n.length),m:(t,n)=>$(t.getMinutes(),n.length),s:(t,n)=>$(t.getSeconds(),n.length),S(t,n){const e=n.length,o=t.getMilliseconds();return $(Math.trunc(o*Math.pow(10,e-3)),n.length)}},tt={G:function(t,n,e){const o=t.getFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return e.era(o,{width:"abbreviated"});case"GGGGG":return e.era(o,{width:"narrow"});default:return e.era(o,{width:"wide"})}},y:function(t,n,e){if("yo"===n){const n=t.getFullYear(),o=n>0?n:1-n;return e.ordinalNumber(o,{unit:"year"})}return K.y(t,n)},Y:function(t,n,e,o){const r=Z(t,o),a=r>0?r:1-r;return"YY"===n?$(a%100,2):"Yo"===n?e.ordinalNumber(a,{unit:"year"}):$(a,n.length)},R:function(t,n){return $(R(t),n.length)},u:function(t,n){return $(t.getFullYear(),n.length)},Q:function(t,n,e){const o=Math.ceil((t.getMonth()+1)/3);switch(n){case"Q":return String(o);case"QQ":return $(o,2);case"Qo":return e.ordinalNumber(o,{unit:"quarter"});case"QQQ":return e.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(o,{width:"narrow",context:"formatting"});default:return e.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,n,e){const o=Math.ceil((t.getMonth()+1)/3);switch(n){case"q":return String(o);case"qq":return $(o,2);case"qo":return e.ordinalNumber(o,{unit:"quarter"});case"qqq":return e.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(o,{width:"narrow",context:"standalone"});default:return e.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,n,e){const o=t.getMonth();switch(n){case"M":case"MM":return K.M(t,n);case"Mo":return e.ordinalNumber(o+1,{unit:"month"});case"MMM":return e.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(o,{width:"narrow",context:"formatting"});default:return e.month(o,{width:"wide",context:"formatting"})}},L:function(t,n,e){const o=t.getMonth();switch(n){case"L":return String(o+1);case"LL":return $(o+1,2);case"Lo":return e.ordinalNumber(o+1,{unit:"month"});case"LLL":return e.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(o,{width:"narrow",context:"standalone"});default:return e.month(o,{width:"wide",context:"standalone"})}},w:function(t,n,e,o){const r=G(t,o);return"wo"===n?e.ordinalNumber(r,{unit:"week"}):$(r,n.length)},I:function(t,n,e){const o=J(t);return"Io"===n?e.ordinalNumber(o,{unit:"week"}):$(o,n.length)},d:function(t,n,e){return"do"===n?e.ordinalNumber(t.getDate(),{unit:"date"}):K.d(t,n)},D:function(t,n,e){const o=X(t);return"Do"===n?e.ordinalNumber(o,{unit:"dayOfYear"}):$(o,n.length)},E:function(t,n,e){const o=t.getDay();switch(n){case"E":case"EE":case"EEE":return e.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},e:function(t,n,e,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return $(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},c:function(t,n,e,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return $(a,n.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(r,{width:"narrow",context:"standalone"});case"cccccc":return e.day(r,{width:"short",context:"standalone"});default:return e.day(r,{width:"wide",context:"standalone"})}},i:function(t,n,e){const o=t.getDay(),r=0===o?7:o;switch(n){case"i":return String(r);case"ii":return $(r,n.length);case"io":return e.ordinalNumber(r,{unit:"day"});case"iii":return e.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},a:function(t,n,e){const o=t.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(o,{width:"narrow",context:"formatting"});default:return e.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,n,e){const o=t.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,n,e){const o=t.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,n,e){if("ho"===n){let n=t.getHours()%12;return 0===n&&(n=12),e.ordinalNumber(n,{unit:"hour"})}return K.h(t,n)},H:function(t,n,e){return"Ho"===n?e.ordinalNumber(t.getHours(),{unit:"hour"}):K.H(t,n)},K:function(t,n,e){const o=t.getHours()%12;return"Ko"===n?e.ordinalNumber(o,{unit:"hour"}):$(o,n.length)},k:function(t,n,e){let o=t.getHours();return 0===o&&(o=24),"ko"===n?e.ordinalNumber(o,{unit:"hour"}):$(o,n.length)},m:function(t,n,e){return"mo"===n?e.ordinalNumber(t.getMinutes(),{unit:"minute"}):K.m(t,n)},s:function(t,n,e){return"so"===n?e.ordinalNumber(t.getSeconds(),{unit:"second"}):K.s(t,n)},S:function(t,n){return K.S(t,n)},X:function(t,n,e){const o=t.getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return et(o);case"XXXX":case"XX":return ot(o);default:return ot(o,":")}},x:function(t,n,e){const o=t.getTimezoneOffset();switch(n){case"x":return et(o);case"xxxx":case"xx":return ot(o);default:return ot(o,":")}},O:function(t,n,e){const o=t.getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+nt(o,":");default:return"GMT"+ot(o,":")}},z:function(t,n,e){const o=t.getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+nt(o,":");default:return"GMT"+ot(o,":")}},t:function(t,n,e){return $(Math.trunc(t.getTime()/1e3),n.length)},T:function(t,n,e){return $(t.getTime(),n.length)}};function nt(t,n=""){const e=t>0?"-":"+",o=Math.abs(t),r=Math.trunc(o/60),a=o%60;return 0===a?e+String(r):e+String(r)+n+$(a,2)}function et(t,n){return t%60==0?(t>0?"-":"+")+$(Math.abs(t)/60,2):ot(t,n)}function ot(t,n=""){const e=t>0?"-":"+",o=Math.abs(t);return e+$(Math.trunc(o/60),2)+n+$(o%60,2)}const rt=(t,n)=>{switch(t){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},at=(t,n)=>{switch(t){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}},it={p:at,P:(t,n)=>{const e=t.match(/(P+)(p+)?/)||[],o=e[1],r=e[2];if(!r)return rt(t,n);let a;switch(o){case"P":a=n.dateTime({width:"short"});break;case"PP":a=n.dateTime({width:"medium"});break;case"PPP":a=n.dateTime({width:"long"});break;default:a=n.dateTime({width:"full"})}return a.replace("{{date}}",rt(o,n)).replace("{{time}}",at(r,n))}},dt=/^D+$/,ct=/^Y+$/,st=["D","DD","YY","YYYY"];function At(t){if(!(n=t,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof t))return!1;var n;const e=Y(t);return!isNaN(Number(e))}const lt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ut=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,pt=/^'([^]*?)'?$/,gt=/''/g,ft=/[a-zA-Z]/;function mt(t,n,e){const o=P(),r=e?.locale??o.locale??W,a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,d=Y(t);if(!At(d))throw new RangeError("Invalid time value");let c=n.match(ut).map((t=>{const n=t[0];return"p"===n||"P"===n?(0,it[n])(t,r.formatLong):t})).join("").match(lt).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const n=t[0];if("'"===n)return{isToken:!1,value:ht(t)};if(tt[n])return{isToken:!0,value:t};if(n.match(ft))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return{isToken:!1,value:t}}));r.localize.preprocessor&&(c=r.localize.preprocessor(d,c));const s={firstWeekContainsDate:a,weekStartsOn:i,locale:r};return c.map((o=>{if(!o.isToken)return o.value;const a=o.value;return(!e?.useAdditionalWeekYearTokens&&function(t){return ct.test(t)}(a)||!e?.useAdditionalDayOfYearTokens&&function(t){return dt.test(t)}(a))&&function(t,n,e){const o=function(t,n,e){const o="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${n}\`) for formatting ${o} to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,n,e);if(console.warn(o),st.includes(t))throw new RangeError(o)}(a,n,String(t)),(0,tt[a[0]])(d,a,r.localize,s)})).join("")}function ht(t){const n=t.match(pt);return n?n[1].replace(gt,"'"):t}function Et(t,n="Default",e="None",o="None",r="none"){let a=[...JSON.parse(localStorage.getItem(n)).todoItems];a.push({title:t,project:n,description:e,duedate:o,priority:r.toLowerCase()}),localStorage.setItem(n,JSON.stringify({projectName:n,todoItems:a}))}function xt(t){const n=m(),e=[];return n.forEach((n=>{JSON.parse(n[1]).projectName==t&&JSON.parse(n[1]).todoItems.forEach((t=>{e.push(t)}))})),e}function _t(t,n,e){let o=[...JSON.parse(localStorage.getItem(t)).todoItems].map((t=>t.title!==n&&t.priority!==e?t:null)).filter((t=>null!==t));localStorage.setItem(t,JSON.stringify({projectName:t,todoItems:o}))}function Ct(t="Title",n="none",e="none",o="Default"){const r=_("div","todo__item"),a=b("checkbox","todo__checkbox"),i=_("label","todo__title");i.dataset.priority=e;const d=_("span","todo__title--circle"),c=_("span","todo__text");c.textContent=t;const s=_("span","todo__settings");s.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z" /></svg>';const A=_("div","todo__settings-all");A.classList.add("hidden");const l=bt("Edit","edit-todo"),u=bt("Delete","delete-todo"),p=bt("Info","info-todo"),g=_("span","todo__duedate");g.textContent=n;const f=_("span","todo__project-name"),m=_("span","todo__project-img");m.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.41,21L6.12,17H2.12L2.47,15H6.47L7.53,9H3.53L3.88,7H7.88L8.59,3H10.59L9.88,7H15.88L16.59,3H18.59L17.88,7H21.88L21.53,9H17.53L16.47,15H20.47L20.12,17H16.12L15.41,21H13.41L14.12,17H8.12L7.41,21H5.41M9.53,9L8.47,15H14.47L15.53,9H9.53Z" /></svg>';const E=_("span","todo__project-title");return E.textContent=o,h(r,a),h(r,i),h(i,d),h(i,c),h(i,s),h(s,A),h(A,l),h(A,u),h(A,p),h(i,g),h(i,f),h(f,m),h(f,E),r}function bt(t,n){const e=_("div","todo__settings-item");return e.classList.add(n),e.textContent=t,e}class yt{static todoLoader(t="All"){const n="All"===t?m().map((t=>JSON.parse(t[1]).todoItems.reverse())).reverse():[(e=t,JSON.parse(localStorage.getItem(e))).todoItems.reverse()];var e;const o=document.querySelector(".content"),r=_("div","todo__items-list");x(o,r),n.forEach((t=>{t.forEach((t=>{const n=Ct(t.title,t.duedate.todoItem,t.priority,t.project);x(r,n)}))})),Tt.todoSettingsButton(),Mt()}static todoTodayLoader(){yt.todoItemsClear();const t=document.querySelector(".content"),n=_("div","todo__items-list");x(t,n),function(){const t=[],n=mt(new Date,"MM/dd/yy");return m().forEach((e=>{JSON.parse(e[1]).todoItems.forEach((e=>{e.duedate.sort===n&&t.push(e)}))})),t}().forEach((t=>{const e=Ct(t.title,t.duedate.todoItem,t.priority,t.project);x(n,e)}))}static todoNextWeekLoader(){yt.todoItemsClear();const t=document.querySelector(".content"),n=_("div","todo__items-list");x(t,n),function(){const t=[],n=mt(new Date,"MM/dd/yy").split("/");return m().forEach((e=>{JSON.parse(e[1]).todoItems.forEach((e=>{const o=e.duedate.sort.split("/");o[1]-n[1]<=7&&o[0]===n[0]&&o[2]===n[2]&&t.push(e)}))})),t}().forEach((t=>{const e=Ct(t.title,t.duedate.todoItem,t.priority,t.project);x(n,e)}))}static projectTodoItems(t){const n=document.querySelector(".content"),e=_("div","todo__items-list");x(n,e),xt(t).forEach((t=>{const n=Ct(t.title,t.duedate.todoItem,t.priority,t.project);x(e,n)}))}static todoItemsClear(){document.querySelectorAll(".todo__item").forEach((t=>t.remove()))}static todoLoaderInvoke(t="All"){yt.todoItemsClear(),yt.todoLoader(t)}static todoIntermediateMethod(t,n){const e=[Ht.bind(n),qt.bind(n),Dt.bind(n)];["Edit","Delete","Info"].forEach(((n,o)=>n===t?e[o]():""))}static todoUpdatePageRender(t,n){const e=[yt.todoLoaderInvoke,yt.todoTodayLoader,yt.todoNextWeekLoader];let o=!0;["All To-Do Tasks","Today","Next 7 Day"].forEach(((n,r)=>{n.toLowerCase()===t.toLowerCase()&&(e[r](),o=!1)})),o&&yt.todoLoaderInvoke(n)}}function Bt(t,n){const e=_("div","content__label-name"),o=_("div","content__project-info");return e.textContent=t,o.textContent=n,[e,o]}function wt(){const t=_("form","todo__form");return h(t,function(){const t=_("div","todo__add-task--btn"),n=C("div","todo__add-task--icon","+"),e=C("div","todo__add-task--title","Add task");return h(t,n),h(t,e),t}()),t}function vt(t="Default",n="Add",e){const o=_("form","todo__add-task");o.classList.add("hidden"),"edit-form"===e&&o.classList.add("edit-form");const r=b("text","todo__add-task--name","Task name"),a=b("text","todo__add-task--description","Description");return h(o,r),h(o,a),h(o,function(){const t=_("div","todo__add-task--settings"),n=_("div","duedate"),e=_("div","priority"),o=kt("duedate","duedate","Due Date"),r=kt("priority","priority","Priority");return h(t,n),h(t,e),h(n,o),h(e,r),h(n,function(){const t=_("div","duedate__settings");t.classList.add("hidden");const n=_("div","duedate__item"),e=_("label","duedate__label");e.textContent="Date: ",e.for="date";const o=b("date","duedate__date","","date","2025-01-01");return h(n,e),h(n,o),h(t,n),t}()),h(e,function(){const t=_("div","priority__settings");t.classList.add("hidden");const n=jt("Low","low"),e=jt("Medium","medium"),o=jt("High","high"),r=jt("None","none");return h(t,n),h(t,e),h(t,o),h(t,r),t}()),t}()),h(o,function(t="Default",n="Add"){const e=_("div","todo__add-task--add"),o=_("div","todo__add-task--project"),r=_("div","todo__add-task--project-title"),a=_("span","todo__add-task--project-img"),i=_("span","todo__add-task--project-text");a.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.41,21L6.12,17H2.12L2.47,15H6.47L7.53,9H3.53L3.88,7H7.88L8.59,3H10.59L9.88,7H15.88L16.59,3H18.59L17.88,7H21.88L21.53,9H17.53L16.47,15H20.47L20.12,17H16.12L15.41,21H13.41L14.12,17H8.12L7.41,21H5.41M9.53,9L8.47,15H14.47L15.53,9H9.53Z" /></svg>',i.textContent=t;const d=_("div","todo__add-task--project-projects");d.classList.add("hidden"),h(e,o),h(o,r),h(o,d),h(r,a),h(r,i);const c=C("div","todo__add-task--add-text",n);return"Edit"===n&&c.classList.add("edit-form-btn"),h(e,C("div","todo__add-task--cancel-text","Cancel")),h(e,c),e}(t,n)),o}function kt(t,n,e){const o=_("div",`${t}-title`),r=_("span",`${t}-img`),a=_("span",`${t}-text`);return r.innerHTML={duedate:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M9,10V12H7V10H9M13,10V12H11V10H13M17,10V12H15V10H17M19,3A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5C3.89,21 3,20.1 3,19V5A2,2 0 0,1 5,3H6V1H8V3H16V1H18V3H19M19,19V8H5V19H19M9,14V16H7V14H9M13,14V16H11V14H13M17,14V16H15V14H17Z" /></svg>',priority:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14,19H22V17H14V19M14,13.5H22V11.5H14V13.5M14,8H22V6H14V8M2,12.5C2,8.92 4.92,6 8.5,6H9V4L12,7L9,10V8H8.5C6,8 4,10 4,12.5C4,15 6,17 8.5,17H12V19H8.5C4.92,19 2,16.08 2,12.5Z" /></svg>',project:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.41,21L6.12,17H2.12L2.47,15H6.47L7.53,9H3.53L3.88,7H7.88L8.59,3H10.59L9.88,7H15.88L16.59,3H18.59L17.88,7H21.88L21.53,9H17.53L16.47,15H20.47L20.12,17H16.12L15.41,21H13.41L14.12,17H8.12L7.41,21H5.41M9.53,9L8.47,15H14.47L15.53,9H9.53Z" /></svg>'}[n],a.textContent=e,h(o,r),h(o,a),o}function jt(t,n){const e=_("div","priority__item"),o=_("span","priority__circle");o.dataset.prioritySet=n,o.classList.add(n);const r=_("span","priority__title");return r.textContent=t,h(e,o),h(e,r),e}function St(){const t=document.querySelector(".priority__settings"),n=document.querySelector(".priority-text");t.addEventListener("click",(function(t){t.target.classList.contains("priority__item")&&(n.textContent=t.target.textContent,(new Tt).todoClearAnotherButton())}))}function Lt(t="All"){const n=document.querySelector(".todo__add-task--add-text"),e=document.querySelector(".todo__add-task--name"),o=document.querySelector(".todo__add-task--description"),r=document.querySelector("#date");St(),function(){const t=document.querySelector(".todo__add-task--project-projects"),n=document.querySelector(".todo__add-task--project-text");t.addEventListener("click",(function(t){t.target.classList.contains("todo__add-task--item")&&(n.textContent=t.target.textContent,(new Tt).todoClearAnotherButton())}))}(),n.addEventListener("click",(function(){try{const n=document.querySelector(".todo__add-task--project-text"),a=document.querySelector(".priority-text"),i=new Date(r.value.split("-").join(", ")),d={todoItem:mt(i,"MMMM dd","en-US"),todoInfo:mt(i,"MMMM dd, Yo","en-US"),sort:mt(i,"MM/dd/yy")};Et(e.value||"None",n.textContent,o.value||"None",d,a.textContent?a.textContent:"None"),yt.todoLoaderInvoke(t),e.value="",o.value=""}catch(t){console.log(t),console.log("ERROR")}}))}function Mt(){const t=document.querySelectorAll(".edit-form");0===Array.from(t).length||t.forEach((t=>t.remove()))}function Ht(){const t=this.closest(".todo__title"),n=t.querySelector(".todo__text").textContent;Mt();const e=xt(t.querySelector(".todo__project-title").textContent).find((e=>e.title===n&&e.priority===t.dataset.priority));E(t.closest(".todo__item"),vt(e.project,"Edit","edit-form")),document.querySelector(".edit-form").classList.remove("hidden"),function(t,n,e){const o=document.querySelector(".edit-form-btn"),r=o.closest(".edit-form"),a=r.querySelector(".todo__add-task--name"),i=r.querySelector(".todo__add-task--description"),d=r.querySelector(".duedate__date");St(),o.addEventListener("click",(function(){const o=r.querySelector(".priority-text");!function(t,n,e,o="None",r="None",a,i="None"){_t(t,n,e);const d=new Date;let c=[...JSON.parse(localStorage.getItem(t)).todoItems];c.push({title:o,project:t,description:r,duedate:{todoItem:mt(d,"MMMM dd","en-US"),todoInfo:mt(d,"MMMM dd, Yo","en-US"),sort:mt(d,"MM/dd/yy")},priority:i.toLowerCase()}),localStorage.setItem(t,JSON.stringify({projectName:t,todoItems:c}))}(t,n,e,a.value,i.value,d.value,o.textContent),yt.todoUpdatePageRender(document.querySelector(".header").textContent,t),Mt()}))}(e.project,e.title,e.priority),Wt()}function qt(){const t=this.closest(".todo__title"),n=t.querySelector(".todo__text").textContent,e=xt(t.querySelector(".todo__project-title").textContent).find((e=>e.title===n&&e.priority===t.dataset.priority));_t(e.project,e.title,e.priority),yt.todoLoaderInvoke()}function Dt(){const t=document.querySelector(".content"),n=this.closest(".todo__title"),e=n.querySelector(".todo__text").textContent,o=xt(n.querySelector(".todo__project-title").textContent).find((t=>t.title===e&&t.priority===n.dataset.priority)),r=function(t,n,e,o,r){const a=_("div","content__info"),i=[_("div","content__name"),...Bt("ToDo Name:",t)],d=[_("div","content__description"),...Bt("Description:",n)],c=[_("div","content__duedate"),...Bt("Duedate",e)],s=[_("div","content__priority"),...Bt("Priority",o)],A=[_("div","content__project"),...Bt("Project",r)],l=C("div","content__close"),u=C("div","content__close--btn","Close");return h(i[0],i[1]),h(i[0],i[2]),h(d[0],d[1]),h(d[0],d[2]),h(c[0],c[1]),h(c[0],c[2]),h(s[0],s[1]),h(s[0],s[2]),h(A[0],A[1]),h(A[0],A[2]),h(a,i[0]),h(a,d[0]),h(a,c[0]),h(a,s[0]),h(a,A[0]),h(a,l),h(l,u),a}(o.title,o.description,o.duedate.todoInfo,o.priority,o.project);h(t,r),Tt.modalContentClose()}class Tt{static projectsDropdownButton(){const t=document.querySelector(".projects-title"),n=document.querySelector(".projects"),e=document.querySelector(".projects-see-all"),o=document.querySelector(".todo__add-project--btn"),r=document.querySelector(".add-project");t.addEventListener("click",(function(){r.classList.contains("hidden")&&(e.innerHTML=n.classList.contains("hidden")?'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>':'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',o.classList.toggle("hidden"),n.classList.toggle("hidden"))}))}projectAddButton(){const t=document.querySelector(".todo__add-project--btn"),n=document.querySelector(".add-project");t.addEventListener("click",(function(){t.classList.add("hidden"),n.classList.remove("hidden")}))}projectAddNewButton(){const t=document.querySelector(".add-project__add"),n=document.querySelector(".todo__add-project--btn"),e=document.querySelector(".add-project");t.addEventListener("click",(function(){e.classList.add("hidden"),n.classList.remove("hidden")}))}projectCancelButton(){const t=document.querySelector(".todo__add-project--btn"),n=document.querySelector(".add-project__cancel"),e=document.querySelector(".add-project");n.addEventListener("click",(function(){t.classList.remove("hidden"),e.classList.add("hidden")}))}projectCancelUpdateButton(){document.querySelectorAll(".project-edit-form").forEach((t=>{t.querySelector(".add-project__cancel").addEventListener("click",(function(){t.remove()}))}))}todoAddButton(){const t=document.querySelector(".todo__add-task--btn"),n=document.querySelector(".todo__add-task");t.addEventListener("click",(function(){t.classList.add("hidden"),n.classList.remove("hidden"),Mt()}))}todoCancelAddButton(){const t=document.querySelector(".todo__add-task--btn"),n=document.querySelector(".todo__add-task");document.querySelector(".todo__add-task--cancel-text").addEventListener("click",(function(){t.classList.remove("hidden"),n.classList.add("hidden"),Mt()}))}static todoSettingsButton(){const t=document.querySelectorAll(".todo__settings"),n=document.querySelectorAll(".todo__settings-all");t?.forEach((t=>{t.addEventListener("click",(function(e){const o=t.querySelector(".todo__settings-all");if(e.target.classList.contains("todo__settings-item")){o.classList.toggle("hidden");const t=e.target.textContent;yt.todoIntermediateMethod(t,e.target)}else o.classList.contains("hidden")&&n.forEach((t=>t.classList.add("hidden"))),o.classList.toggle("hidden")}))})),document.querySelector(".todo__items-list").addEventListener("click",(function(t){t.target.classList.contains("todo__title--circle")&&yt.todoIntermediateMethod("Delete",t.target)}))}todoClearAnotherButton(t){const n=document.querySelector(".duedate__settings"),e=document.querySelector(".priority__settings"),o=document.querySelector(".todo__add-task--project-projects");n.classList.add("hidden"),e.classList.add("hidden"),o.classList.add("hidden"),t?.classList.remove("hidden")}todoDuedateButton(){const t=document.querySelector(".duedate__settings");document.querySelector(".duedate-title").addEventListener("click",(()=>{t.classList.contains("hidden")?this.todoClearAnotherButton(t):t.classList.add("hidden")}))}todoPriorityButton(){const t=document.querySelector(".priority__settings");document.querySelector(".priority-title").addEventListener("click",(()=>{t.classList.contains("hidden")?this.todoClearAnotherButton(t):t.classList.add("hidden")}))}todoChooseProjectButton(){const t=document.querySelector(".todo__add-task--project-projects");document.querySelector(".todo__add-task--project-title").addEventListener("click",(()=>{t.classList.contains("hidden")?this.todoClearAnotherButton(t):t.classList.add("hidden")}))}static modalContentClose(){document.querySelector(".content__close--btn").addEventListener("click",(function(t){t.target.closest(".content__info").remove()}))}}function Wt(){const t=new Tt;t.todoAddButton(),t.todoCancelAddButton(),t.projectAddButton(),t.projectAddNewButton(),t.projectCancelButton(),t.todoDuedateButton(),t.todoPriorityButton(),t.todoChooseProjectButton()}function It(t){const n=t.target;if(n.classList.contains("project-name")){const t=document.querySelector(".header"),e=document.querySelector(".content"),o=n.textContent;t.textContent="Project: "+o,e.innerHTML="",yt.projectTodoItems(o),h(e,wt()),h(e,vt(o)),Lt(o),Wt(),Tt.todoSettingsButton()}}const Pt=document.querySelector(".sidebar"),Nt=["All","Today","Next 7 day"],zt=[function(){const t=document.querySelector(".header"),n=document.querySelector(".content");t.textContent="All To-Do Tasks",n.innerHTML="",yt.todoLoaderInvoke(),h(n,wt()),h(n,vt()),Lt(),Wt(),Qt.projectDropdownLoader()},function(){const t=document.querySelector(".header"),n=document.querySelector(".content");t.textContent="Today",n.innerHTML="",h(n,wt()),h(n,vt()),yt.todoTodayLoader(),Tt.todoSettingsButton()},function(){const t=document.querySelector(".header"),n=document.querySelector(".content");t.textContent="Next 7 Day",n.innerHTML="",h(n,wt()),h(n,vt()),yt.todoNextWeekLoader(),Tt.todoSettingsButton()}];class Yt{static defaultPage(){zt[0]()}static render(){Yt.defaultPage(),Pt.addEventListener("click",(function(t){if(t.target.classList.contains("sidebar-text")){let n=t.target.textContent;Nt.forEach(((t,e)=>{t===n&&zt[e]()}))}}))}}const Ot=document.querySelector(".content"),Vt=document.querySelector(".header"),Ut=document.querySelector(".sidebar"),Xt=document.querySelector(".projects");class Qt{static projectSidebarLoader(t){Xt.innerHTML="";for(const t of Object.entries(localStorage).reverse())h(Xt,v(t[0]))}static projectSidebarDelete(){document.querySelectorAll(".project-settings-delete").forEach((t=>{t.addEventListener("click",(function(t){f(t.target.closest(".project").querySelector(".project-name").textContent),Yt.defaultPage(),Qt.projectLoaderInvoke()}))}))}static projectSidebarRename(){document.querySelectorAll(".project-settings-rename").forEach((t=>{t.addEventListener("click",(function(t){const n=t.target.closest(".project");n.nextElementSibling?.classList.contains("project-edit-form")||document.querySelector(".project-edit-form")||function(t){E(t,y("Edit"));const n=document.querySelector(".project-edit-form"),e=n.querySelector(".add-project__add"),o=t.querySelector(".project-name").textContent;e.addEventListener("click",(function(){try{if("Default"===o)throw new Error;const t=n.querySelector("input");!function(t,n){if(localStorage.getItem(t)||t.length<=0&&"default"===t.toLowerCase())throw console.log("This name of project already exist or you`ve named it with empty field"),console.log("Remember that you can not create project named as Default"),new Error;const e=[...JSON.parse(localStorage.getItem(n)).todoItems];f(n),localStorage.setItem(t,JSON.stringify({projectName:t,todoItems:e}))}(t.value,o),Qt.projectLoaderInvoke(),Qt.projectPageUpdate(t.value),Qt.projectDropdownLoader()}catch(t){console.log("ERROR")}}))}(n),(new Tt).projectCancelUpdateButton()}))}))}static projectPageUpdate(t){Vt.textContent.split(":").find((t=>"Project"===t))&&(Vt.textContent="Project: "+t,Ot.innerHTML="Your To-Do Items Will Be Here")}static projectPageLoader(t){t.target.classList.contains("project-name")&&(Vt.textContent="Project: "+t.target.textContent,Ot.innerHTML="Your To-Do Items Will Be Here")}static createDropdownProjectItem(t){const n=_("div","todo__add-task--item");return n.textContent=t,n}static projectDropdownLoader(){const t=document.querySelector(".todo__add-task--project-projects");t&&(t.innerHTML="");const n=m();n?.forEach((n=>h(t,Qt.createDropdownProjectItem(n[0]))))}static projectLoaderInvoke(){Qt.projectSidebarLoader(),Qt.projectSidebarDelete(),Qt.projectSidebarRename(),Ut.addEventListener("click",It)}}localStorage.setItem("Default",JSON.stringify({projectName:"Default",todoItems:[]})),function(){const t=new Date;Et("This is To-Do Application.","Default","La-la-la.",{todoItem:mt(t,"MMMM dd","en-US"),todoInfo:mt(t,"MMMM dd, Yo","en-US"),sort:mt(t,"MM/dd/yy")},"Medium"),Et("I appreciate that you use this application.","Default","Have a fun!",{todoItem:mt(t,"MMMM dd","en-US"),todoInfo:mt(t,"MMMM dd, Yo","en-US"),sort:mt(t,"MM/dd/yy")},"High")}(),y(),Tt.projectsDropdownButton(),Yt.render(),B.addEventListener("click",(function(){try{!function(t="None"){if((t=t.split(" ")[0]).length<=0||"string"!=typeof t||localStorage.getItem(t))throw console.log("Item already exist or you`ve created empty project title"),new Error;localStorage.setItem(t,JSON.stringify({projectName:t,todoItems:[]}))}(w.value),Qt.projectLoaderInvoke(),Qt.projectDropdownLoader()}catch(t){console.log(t),console.log("ERROR")}})),Qt.projectLoaderInvoke()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,